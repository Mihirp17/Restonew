// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// SaaS Platform Models
model PlatformAdmin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id            String     @id @default(cuid())
  restaurantId  String     @unique
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  stripeCustomerId String  @unique
  stripeSubscriptionId String @unique
  status        String     // active, canceled, past_due
  plan          String     // basic, premium
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

// Restaurant Models
model Restaurant {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  logo        String?
  address     String?
  phone       String?
  email       String
  password    String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  users       User[]
  tables      Table[]
  menuItems   MenuItem[]
  orders      Order[]
  feedback    Feedback[]
  subscription Subscription?
}

model Table {
  id           String     @id @default(cuid())
  number       Int
  qrCode       String     @unique
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  isOccupied   Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relations
  orders       Order[]
  feedback     Feedback[]
}

// Menu Models
model MenuItem {
  id           String      @id @default(cuid())
  name         String
  description  String?
  price        Decimal
  image        String?
  category     String
  isAvailable  Boolean     @default(true)
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Relations
  orderItems   OrderItem[]
}

// Order Models
model Order {
  id           String      @id @default(cuid())
  customerName String
  status       String      // pending, confirmed, completed, cancelled
  total        Decimal
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  tableId      String
  table        Table       @relation(fields: [tableId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  // Relations
  items        OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Decimal
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String
  name         String?
  role         String     // admin or manager
  restaurantId String?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  feedback     Feedback[]
}

model Feedback {
  id           String     @id @default(cuid())
  rating       Int
  comment      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  table        Table      @relation(fields: [tableId], references: [id])
  tableId      String
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  @@index([restaurantId])
  @@index([tableId])
  @@index([userId])
}
